#!/usr/bin/python

import itertools
import sys


def first_16bit(seq):
    for i, n in enumerate(seq):
        if n and n < 65536:
            return i


timer_freq = 16000000.0
reciprocals = [int(timer_freq) / i if i else None for i in range(65536 + 1)]

# We divide the range [0..65536) into three ranges.
# [0 .. begin1)      - error.  (quotient > 65535.)
# [begin1 .. begin2) - interpolate table1.
# [begin2 .. 65535)  - interpolate table2.

shift1 = 3
shift2 = 8
step1 = 1 << shift1
step2 = 1 << shift2
begin1 = (first_16bit(reciprocals) + step1 - 1) & -step1
begin2 = 2048

table1 = reciprocals[:begin2:step1][begin1/step1:]
table2 = reciprocals[::step2][begin2/step2:]

fcn_def = """
static inline uint16_t convert_rate_to_interval(uint16_t rate)
{
    union {
        uint32_t dw;
        uint16_t w[2];
    } x;

    if (rate < CONV_BEGIN1)
        return 0;
    if (rate < CONV_BEGIN2) {
        uint8_t index = (rate - CONV_BEGIN1) >> CONV_SHIFT1;
        x.dw = pgm_read_dword_near(conv_table1_PGM + index);
        uint16_t a = x.w[0];
        uint16_t b = x.w[1];
        return a - ((a - b) * (rate & CONV_MASK1) >> CONV_SHIFT1);
    }
    uint8_t index = (rate - CONV_BEGIN2) >> CONV_SHIFT2;
    x.dw = pgm_read_dword_near(conv_table2_PGM + index);
    uint16_t a = x.w[0];
    uint16_t b = x.w[1];
    return a - ((uint32_t)(a - b) * (rate & CONV_MASK2) >> CONV_SHIFT2);
}
"""


def print_table(table, name, start=0):

    columns = 8
    field_width = 7

    def group_into_lines((i, n)):
        return i / columns

    print 'const uint16_t %s[%d] PROGMEM = {' % (name, len(table))
    leading = [' ' * (field_width - 1)] * (start % columns)
    for l in itertools.groupby(enumerate(table, start), group_into_lines):
        data = list(l[1])
        entries = ['%*d,' % (field_width - 2, n) for i, n in data]
        comment = '/* %d */' % (data[0][0])
        literals = ' '.join(leading + entries)
        print '    %-*s   %s' % (columns * field_width, literals, comment)
        leading = []
    print '};'


def emit():
    inc_sym = 'CONV_TABLE_INCLUDED'
    def_sym = 'DEFINE_CONV_TABLE'

    print '#ifndef', inc_sym
    print '#define', inc_sym
    print
    print '/* Automatically generated by %s; do not edit. */' % sys.argv[0]
    print
    print '#include <stdint.h>'
    print '#include <avr/pgmspace.h>'
    print
    print '#define CONV_BEGIN1', begin1
    print '#define CONV_BEGIN2', begin2 
    print '#define CONV_SHIFT1', shift1
    print '#define CONV_SHIFT2', shift2
    print '#define CONV_STEP1 (1 << CONV_SHIFT1)'
    print '#define CONV_STEP2 (1 << CONV_SHIFT2)'
    print '#define CONV_MASK1 (CONV_STEP1 - 1)'
    print '#define CONV_MASK2 (CONV_STEP2 - 1)'
    print
    print 'extern const uint16_t conv_table1_PGM[%d] PROGMEM;' % len(table1)
    print 'extern const uint16_t conv_table2_PGM[%d] PROGMEM;' % len(table2)
    print
    print fcn_def.strip()
    print
    print '#ifdef', def_sym
    print
    print_table(table1, 'conv_table1_PGM', start=begin1 / step1)
    print
    print_table(table2, 'conv_table2_PGM', start=begin2 / step2)
    print
    print '#endif /* %s */' % def_sym
    print
    print '#endif /* !%s */' % inc_sym

if __name__ == '__main__':
    emit()
